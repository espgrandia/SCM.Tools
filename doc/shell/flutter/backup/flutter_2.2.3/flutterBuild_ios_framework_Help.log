Produces .xcframeworks for a Flutter project and its plugins for integration into existing, plain Xcode projects.
This can only be run on macOS hosts.

Global options:
-h, --help                  Print this usage information.
-v, --verbose               Noisy logging, including all shell commands executed.
                            If used with "--help", shows hidden options. If used with "flutter doctor", shows additional diagnostic information. (Use "-vv" to force verbose logging in those cases.)
-d, --device-id             Target device id or name (prefixes allowed).
    --version               Reports the version of this tool.
    --suppress-analytics    Suppress analytics reporting when this command runs.

Usage: flutter build ios-framework [arguments]
-h, --help                           Print this usage information.
    --[no-]tree-shake-icons          Tree shake icon fonts so that only glyphs used by the application remain.
                                     (defaults to on)
-t, --target=<path>                  The main entry-point file of the application, as run on the device.
                                     If the "--target" option is omitted, but a file name is provided on the command line, then that is used instead.
                                     (defaults to "lib/main.dart")
    --flavor                         Build a custom app flavor as defined by platform-specific build setup.
                                     Supports the use of product flavors in Android Gradle scripts, and the use of custom Xcode schemes.
    --[no-]pub                       Whether to run "flutter pub get" before executing this command.
                                     (defaults to on)
    --dart-define=<foo=bar>          Additional key-value pairs that will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors.
                                     Multiple defines can be passed by repeating "--dart-define" multiple times.
    --split-debug-info=<v1.2.3/>     In a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application. The value of the flag should be a directory where program symbol files can be stored for later use. These symbol files contain the information needed to symbolize Dart stack traces. For an app built with this flag, the "flutter symbolize" command with the right program symbol file is required to obtain a human readable stack trace.
                                     This flag cannot be combined with "--analyze-size".
    --[no-]obfuscate                 In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with "--split-debug-info" option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the "flutter symbolize" command with the right program symbol file is required to obtain a human readable stack trace.
                                     
                                     Because all identifiers are renamed, methods like Object.runtimeType, Type.toString, Enum.toString, Stacktrace.toString, Symbol.toString (for constant symbols or those generated by runtime system) will return obfuscated results. Any code or tests that rely on exact names will break.
    --[no-]null-assertions           Perform additional null assertions on the boundaries of migrated and un-migrated code. This setting is not currently supported on desktop devices.
    --[no-]debug                     Whether to produce a framework for the debug build configuration. By default, all build configurations are built.
                                     (defaults to on)
    --[no-]profile                   Whether to produce a framework for the profile build configuration. By default, all build configurations are built.
                                     (defaults to on)
    --[no-]release                   Whether to produce a framework for the release build configuration. By default, all build configurations are built.
                                     (defaults to on)
    --[no-]cocoapods                 Produce a Flutter.podspec instead of an engine Flutter.xcframework (recommended if host app uses CocoaPods).
-o, --output=<path/to/directory/>    Location to write the frameworks.

Run "flutter help" to see global options.
