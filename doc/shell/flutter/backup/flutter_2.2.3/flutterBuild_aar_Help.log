Build a repository containing an AAR and a POM file.

By default, AARs are built for `release`, `debug` and `profile`.
The POM file is used to include the dependencies that the AAR was compiled against.
To learn more about how to use these artifacts, see https://flutter.dev/go/build-aar

Global options:
-h, --help                  Print this usage information.
-v, --verbose               Noisy logging, including all shell commands executed.
                            If used with "--help", shows hidden options. If used with "flutter doctor", shows additional diagnostic information. (Use "-vv" to force verbose logging in those cases.)
-d, --device-id             Target device id or name (prefixes allowed).
    --version               Reports the version of this tool.
    --suppress-analytics    Suppress analytics reporting when this command runs.

Usage: flutter build aar [arguments]
-h, --help                          Print this usage information.
    --[no-]debug                    Build a debug version of the current project.
                                    (defaults to on)
    --[no-]profile                  Build a version of the current project specialized for performance profiling.
                                    (defaults to on)
    --[no-]release                  Build a release version of the current project.
                                    (defaults to on)
    --[no-]tree-shake-icons         Tree shake icon fonts so that only glyphs used by the application remain.
                                    (defaults to on)
    --flavor                        Build a custom app flavor as defined by platform-specific build setup.
                                    Supports the use of product flavors in Android Gradle scripts, and the use of custom Xcode schemes.
    --build-number                  An identifier used as an internal version number.
                                    Each build must have a unique identifier to differentiate it from previous builds.
                                    It is used to determine whether one build is more recent than another, with higher numbers indicating more recent build.
                                    On Android it is used as "versionCode".
                                    On Xcode builds it is used as "CFBundleVersion".
    --[no-]pub                      Whether to run "flutter pub get" before executing this command.
                                    (defaults to on)
    --split-debug-info=<v1.2.3/>    In a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application. The value of the flag should be a directory where program symbol files can be stored for later use. These symbol files contain the information needed to symbolize Dart stack traces. For an app built with this flag, the "flutter symbolize" command with the right program symbol file is required to obtain a human readable stack trace.
                                    This flag cannot be combined with "--analyze-size".
    --[no-]obfuscate                In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with "--split-debug-info" option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the "flutter symbolize" command with the right program symbol file is required to obtain a human readable stack trace.
                                    
                                    Because all identifiers are renamed, methods like Object.runtimeType, Type.toString, Enum.toString, Stacktrace.toString, Symbol.toString (for constant symbols or those generated by runtime system) will return obfuscated results. Any code or tests that rely on exact names will break.
    --dart-define=<foo=bar>         Additional key-value pairs that will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors.
                                    Multiple defines can be passed by repeating "--dart-define" multiple times.
    --[no-]track-widget-creation    Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT).
                                    (defaults to on)
    --[no-]null-assertions          Perform additional null assertions on the boundaries of migrated and un-migrated code. This setting is not currently supported on desktop devices.
    --target-platform               The target platform for which the project is compiled.
                                    [android-arm (default), android-arm64 (default), android-x86, android-x64 (default)]
    --output-dir                    The absolute path to the directory where the repository is generated. By default, this is "<current-directory>android/build".

Run "flutter help" to see global options.
